name: Build and Publish

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-11]
        python: ['cp38', 'cp39', 'cp310', 'cp311']
        include:
          - os: macos-11
            python: 'cp38'
            build-options: '--universal2'
          - os: macos-11
            python: 'cp39'
            build-options: '--universal2'
          - os: macos-11
            python: 'cp310'
            build-options: '--universal2'
          - os: macos-11
            python: 'cp311'
            build-options: '--universal2'
          - os: ubuntu-20.04
            python: 'cp38'
            arch: 'aarch64'
          - os: ubuntu-20.04
            python: 'cp39'
            arch: 'aarch64'
          - os: ubuntu-20.04
            python: 'cp310'
            arch: 'aarch64'
          - os: ubuntu-20.04
            python: 'cp311'
            arch: 'aarch64'

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 
          
      - name: Set up QEMU for ARM emulation
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
          
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel
        
      - name: Install conan and configure it
        run: |
          python -m pip install conan
          conan profile detect
          
      - name: Build wheels
        env:
          CIBW_BUILD: ${{ matrix.python }}-*
          CIBW_ARCHS: auto64
          CIBW_ARCHS_MACOS: ${{ matrix.arch || 'x86_64 arm64' }}
          CIBW_ARCHS_LINUX: ${{ matrix.arch || 'x86_64' }}
          CIBW_BEFORE_ALL_LINUX: |
            yum install -y cmake
            pip install conan
            conan profile detect
          CIBW_BEFORE_BUILD: |
            pip install -U pip
            pip install conan setuptools wheel
            conan install . --build=missing
          CIBW_BUILD_VERBOSITY: 1
        run: |
          python -m cibuildwheel --output-dir wheelhouse
          
      - uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python }}-${{ matrix.arch || 'multi' }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
          
      - name: Build sdist
        run: python -m build --sdist
        
      - uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: dist/*.tar.gz

  publish:
    name: Publish to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: dist
          
      - name: Prepare distribution files
        run: |
          mkdir -p dist-final
          cp dist/wheels*/*.whl dist-final/
          cp dist/sdist/*.tar.gz dist-final/
          ls -la dist-final/
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist-final/
          skip-existing: true